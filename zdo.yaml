---
manufacturer: &manufacturer
  0x1000: Cirronet
  0x1001: Chipcon
  0x1002: Ember
  0x1003: National Tech
  0x1004: Freescale
  0x1005: IPCom
  0x1006: San Juan Software
  0x1007: TUV
  0x1008: CompXs
  0x1009: BM SpA
  0x100a: AwarePoint
  0x100b: Philips
  0x100c: Luxoft
  0x100d: Korvin
  0x100e: One RF
  0x100f: Software Technology Group
  0x1010: Telegesis
  0x1011: Visionic
  0x1012: Insta
  0x1013: Atalum
  0x1014: Atmel
  0x1015: Develco
  0x1016: Honeywell
  0x1017: RadioPulse
  0x1018: Renesas
  0x1019: Xanadu Wireless
  0x101a: NEC Engineering
  0x101b: Yamatake
  0x101c: Tendril
  0x101d: Assa Abloy
  0x101e: Maxstream
  0x101f: Neurocom
  0x1020: Institute for Information Industry
  0x1021: Vantage Controls
  0x1022: iControl
  0x1023: Raymarine
  0x1024: LS Research
  0x1025: Onity
  0x1026: Mono Products
  0x1027: RF Tech
  0x1028: Itron
  0x1029: Tritech
  0x102a: Embedit
  0x102b: S3C
  0x102c: Siemens
  0x102d: Mindtech
  0x102e: LG Electronics
  0x102f: Mitsubishi
  0x1030: Johnson Controls
  0x1031: PRI
  0x1032: Knick
  0x1033: Viconics
  0x1034: Flexipanel
  0x1035: Piasim Corporation
  0x1036: Trane
  0x1037: Jennic
  0x1038: Living Independently
  0x1039: AlertMe
  0x103a: Daintree
  0x103b: Aiji
  0x103c: Telecom Italia
  0x103d: Mikrokrets
  0x103e: Oki Semi
  0x103f: Newport Electronics
  0x1040: Control4
  0x1041: STMicro
  0x1042: Ad-Sol Nissin
  0x1043: DCSI
  0x1044: France Telecom
  0x1045: muNet
  0x1046: Autani
  0x1047: Colorado vNet
  0x1048: Aerocomm
  0x1049: Silicon Labs
  0x104a: Inncom
  0x104b: Cannon
  0x104c: Synapse
  0x104d: Fisher Pierce/Sunrise
  0x104e: CentraLite
  0x104F: Crane
  0x1050: Mobilarm
  0x1051: iMonitor
  0x1052: Bartech
  0x1053: Meshnetics
  0x1054: LS Industrial
  0x1055: Cason
  0x1056: Wireless Glue
  0x1057: Elster
  0x1058: SMS Tec
  0x1059: Onset Computer
  0x105a: Riga Development
  0x105b: Energate
  0x105c: ConMed Linvatec
  0x105d: PowerMand
  0x105e: Schneider Electric
  0x105f: Eaton
  0x1060: Telular
  0x1061: Delphi Medical
  0x1062: EpiSensor
  0x1063: Landis+Gyr
  0x1064: Kaba Group
  0x1065: Shure
  0x1066: Comverge
  0x1067: DBS Lodging
  0x1068: Energy Aware
  0x1069: Hidalgo
  0x106a: Air2App
  0x106b: AMX
  0x106c: EDMI Pty
  0x106d: Cyan Ltd
  0x106e: System SPA
  0x106f: Telit
  0x1070: Kaga Electronics
  0x1071: 4-noks s.r.l.
  0x1072: Certicom
  0x1073: Gridpoint
  0x1074: Profile Systems
  0x1075: Compacta International
  0x1076: Freestyle Technology
  0x1077: Alektrona
  0x1078: Computime
  0x1079: Remote Technologies
  0x107a: Wavecom
  0x107b: Energy Optimizers
  0x107c: GE
  0x107d: Jetlun
  0x107e: Cipher Systems
  0x107f: Corporate Systems Eng
  0x1080: ecobee
  0x1081: SMK
  0x1082: Meshworks Wireless
  0x1083: Ellips B.V.
  0x1084: Secure electrans
  0x1085: CEDO
  0x1086: Toshiba
  0x1087: Digi International
  0x1088: Ubilogix
  0x1089: Echelon
  0x1090: Green Energy Options
  0x1091: Silver Spring Networks
  0x1092: Black & Decker
  0x1093: Aztech AssociatesInc.
  0x1094: A&D Co
  0x1095: Rainforest Automation
  0x1096: Carrier Electronics
  0x1097: SyChip/Murata
  0x1098: OpenPeak
  0x1099: Passive Systems
  0x109a: MMBResearch
  0x109b: Leviton
  0x109c: Korea Electric Power Data Network
  0x109d: Comcast
  0x109e: NEC Electronics
  0x109f: Netvox
  0x10a0: U-Control
  0x10a1: Embedia Technologies
  0x10a2: Sensus
  0x10a3: SunriseTechnologies
  0x10a4: MemtechCorp
  0x10a5: Freebox
  0x10a6: M2 Labs
  0x10a7: BritishGas
  0x10a8: Sentec
  0x10a9: Navetas
  0x10aa: Lightspeed Technologies
  0x10ab: Oki Electric
  0x10ac: Sistemas Inteligentes
  0x10ad: Dometic
  0x10ae: Alps
  0x10af: EnergyHub
  0x10b0: Kamstrup
  0x10b1: EchoStar
  0x10b2: EnerNOC
  0x10b3: Eltav
  0x10b4: Belkin
  0x10b5: XStreamHD Wireless
  0x10b6: Saturn South
  0x10b7: GreenTrapOnline
  0x10b8: SmartSynch
  0x10b9: Nyce Control
  0x10ba: ICM Controls
  0x10bb: Millennium Electronics
  0x10bc: Motorola
  0x10bd: EmersonWhite-Rodgers
  0x10be: Radio Thermostat
  0x10bf: OMRONCorporation
  0x10c0: GiiNii GlobalLimited
  0x10c1: Fujitsu GeneralLimited
  0x10c2: Peel Technologies
  0x10c3: Accent
  0x10c4: ByteSnap Design
  0x10c5: NEC TOKIN Corporation
  0x10c6: G4S JusticeServices
  0x10c7: Trilliant Networks
  0x10c8: Electrolux Italia
  0x10c9: OnzoLtd
  0x10ca: EnTekSystems
  0x10cb: Philips 2
  0x10cc: MainstreamEngineering
  0x10cd: IndesitCompany
  0x10ce: THINKECO
  0x10cf: 2D2C
  0x10d0: GreenPeak
  0x10d1: InterCEL
  0x10d2: LG Electronics 2
  0x10d3: Mitsumi Electric
  0x10d4: Mitsumi Electric 2
  0x10d5: Zentrum Mikroelektronik Dresden
  0x10d6: Nest Labs
  0x10d7: Exegin Technologies
  0x10d8: Honeywell 2
  0x10d9: Takahata Precision
  0x10da: Sumitomo Electric Networks
  0x10db: GE Energy
  0x10dc: GE Appliances
  0x10dd: Radiocrafts AS
  0x10de: Ceiva
  0x10df: TEC CO Co., Ltd
  0x10e0: Chameleon Technology (UK) Ltd
  0x10e1: Samsung
  0x10e2: ruwido austria gmbh
  0x10e3: Huawei Technologies Co., Ltd.
  0x10e4: Huawei Technologies Co., Ltd. 2
  0x10e5: Greenwave Reality
  0x10e6: BGlobal Metering Ltd
  0x10e7: Mindteck
  0x10e8: Ingersoll-Rand
  0x10e9: Dius Computing Pty Ltd
  0x10ea: Embedded Automation, Inc.
  0x10eb: ABB
  0x10ec: Sony
  0x10ed: Genus Power Infrastructures Limited
  0x10ee: Universal Devices
  0x10ef: Universal Devices 2
  0x10f0: Metrum Technologies, LLC
  0x10f1: Cisco
  0x10f2: Ubisys technologies GmbH
  0x10f3: Consert
  0x10f4: Crestron Electronics
  0x10f5: Enphase Energy
  0x10f6: Invensys Controls
  0x10f7: Mueller Systems, LLC
  0x10f8: AAC Technologies Holding
  0x10f9: U-NEXT Co., Ltd
  0x10fa: Steelcase Inc.
  0x10fb: Telematics Wireless
  0x10fc: Samil Power Co., Ltd
  0x10fd: Pace Plc
  0x10fe: Osborne Coinage Co.
  0x10ff: Powerwatch
  0x1100: CANDELED GmbH
  0x1101: FlexGrid S.R.L
  0x1102: Humax
  0x1103: Universal Electronics, Inc.
  0x1104: Advanced Energy
  0x1105: BEGA Gantenbrink-Leuchten
  0x1106: Brunel University
  0x1107: Panasonic R&D Center Singapore
  0x1108: eSystems Research
  0x1109: Panamax
  0x110a: Physical Graph Corporation
  0x110b: EM-Lite Ltd.
  0x110c: Osram Sylvania
  0x110d: 2 Save Energy Ltd.
  0x110e: Planet Innovation Products Pty Ltd
  0x110f: Ambient Devices, Inc.
  0x1110: Profalux
  0x1111: Billion Electric Company (BEC)
  0x1112: Embertec Pty Ltd
  0x1113: IT Watchdogs
  0x1114: Reloc
  0x1115: Intel Corporation
  0x1116: Trend Electronics Limited
  0x1117: Moxa
  0x1118: QEES
  0x1119: SAYME Wireless Sensor Networks
  0x111a: Pentair Aquatic Systems
  0x111b: Orbit Irrigation
  0x111c: California Eastern Laboratories
  0x111d: Comcast 2
  0x111e: IDT Technology Limited
  0x111f: Pixela
  0x1120: TiVo
  0x1121: Fidure
  0x1122: Marvell Semiconductor
  0x1123: Wasion Group
  0x1124: Jasco Products
  0x1125: Shenzhen Kaifa Technology
  0x1126: Netcomm Wireless
  0x1127: Define Instruments
  0x1128: In Home Displays
  0x1129: Miele & Cie. KG
  0x112a: Televes S.A.
  0x112b: Labelec
  0x112c: China Electronics Standardization Institute
  0x112d: Vectorform
  0x112e: Busch-Jaeger Elektro
  0x112f: Redpine Signals
  0x1130: Bridges Electronic Technology
  0x1131: Sercomm
  0x1132: WSH GmbH wirsindheller
  0x1133: Bosch Security Systems
  0x1134: eZEX Corporation
  0x1135: Dresden Elektronik Ingenieurtechnik GmbH
  0x1136: MEAZON S.A.
  0x1137: Crow Electronic Engineering
  0x1138: Harvard Engineering
  0x1139: Andson(Beijing) Technology
  0x113a: Adhoco AG
  0x113b: Waxman Consumer Products Group
  0x113c: Owon Technology
  0x113d: Hitron Technologies
  0x113e: Scemtec Steuerungstechnik GmbH
  0x113f: Webee
  0x1140: Grid2Home
  0x1141: Telink Micro
  0x1142: Jasmine Systems
  0x1143: Bidgely
  0x1144: Lutron
  0x1145: IJENKO
  0x1146: Starfield Electronic
  0x1147: TCP
  0x1148: Rogers Communications Partnership
  0x1149: Cree
  0x114a: Robert Bosch LLC
  0x114b: Ibis Networks
  0x114c: Quirky
  0x114d: Efergy Technologies
  0x114e: Smartlabs
  0x114f: Everspring Industry
  0x1150: Swann Communications
  0x1151: Soneter
  0x1152: Samsung SDS
  0x1153: Uniband Electronic Corporation
  0x1154: Accton Technology Corporation
  0x1155: Bosch Thermotechnik GmbH
  0x1156: Wincor Nixdorf Inc.
  0x1157: Ohsung Electronics
  0x1158: Zen Within, Inc.
  0x1159: Tech4home, Lda.
  0x115A: Nanoleaf
  0x115B: Keen Home, Inc.
  0x115C: Poly-Control APS
  0x115D: Eastfield Lighting Co., Ltd Shenzhen
  0x115E: IP Datatel, Inc.
  0x115F: Lumi United Techology, Ltd Shenzhen
  0x1160: Sengled Optoelectronics Corp
  0x1161: Remote Solution Co., Ltd.
  0x1162: ABB Genway Xiamen Electrical Equipment Co., Ltd.
  0x1163: Zhejiang Rexense Tech
  0x1164: ForEE Technology
  0x1165: Open Access Technology Intl.
  0x1166: INNR Lighting BV
  0x1167: Techworld Industries
  0x1168: Leedarson Lighting Co., Ltd.
  0x1169: Arzel Zoning
  0x116A: Holley Technology
  0x116B: Beldon Technologies
  0x116C: Flextronics
  0x116D: Shenzhen Meian
  0x116E: Lowes
  0x116F: Sigma Connectivity
  0x1171: Wulian
  0x1172: Plugwise B.V.
  0x1173: Titan Products
  0x1174: Ecospectral
  0x1175: D-Link
  0x1176: Technicolor Home USA
  0x1177: Opple Lighting
  0x1178: Wistron NeWeb Corp.
  0x1179: QMotion Shades
  0x117A: Insta Elektro GmbH
  0x117B: Shanghai Vancount
  0x117C: Ikea of Sweden
  0x117D: RT-RK
  0x117E: Shenzhen Feibit
  0x117F: EuControls
  0x1180: Telkonet
  0x1181: Thermal Solution Resources
  0x1182: PomCube
  0x1183: Ei Electronics
  0x1184: Optoga
  0x1185: Stelpro
  0x1186: Lynxus Technologies Corp.
  0x1187: Semiconductor Components
  0x1188: TP-Link
  0x1189: LEDVANCE LLC.
  0x118A: Nortek
  0x118B: iRevo/Assa Abbloy Korea
  0x118C: Midea
  0x118D: ZF Friedrichshafen
  0x118E: Checkit
  0x118F: Aclara
  0x1190: Nokia
  0x1191: Goldcard High-tech Co., Ltd.
  0x1192: George Wilson Industries Ltd.
  0x1193: EASY SAVER CO.,INC
  0x1194: ZTE Corporation
  0x1195: ARRIS
  0x1196: Reliance BIG TV
  0x1197: Insight Energy Ventures/Powerley
  0x1198: Thomas Research Products (Hubbell Lighting Inc.)
  0x1199: Li Seng Technology
  0x119A: System Level Solutions Inc.
  0x119B: Matrix Labs
  0x119C: Sinope Technologies
  0x119D: Jiuzhou Greeble
  0x119E: Guangzhou Lanvee Tech. Co. Ltd.
  0x119F: Venstar
  0x1200: SLV
  0x1201: Halo Smart Labs
  0x1202: Scout Security Inc.
  0x1203: Alibaba China Inc.
  0x1204: Resolution Products, Inc.
  0x1205: Smartlok Inc.
  0x1206: Lux Products Corp.
  0x1207: Vimar SpA
  0x1208: Universal Lighting Technologies
  0x1209: Robert Bosch, GmbH
  0x120A: Accenture
  0x120B: Heiman Technology Co., Ltd.
  0x120C: Shenzhen HOMA Technology Co., Ltd.
  0x120D: Vision-Electronics Technology
  0x120E: Lenovo
  0x120F: Presciense R&D
  0x1210: Shenzhen Seastar Intelligence Co., Ltd.
  0x1211: Sensative AB
  0x1212: SolarEdge
  0x1213: Zipato
  0x1214: China Fire & Security Sensing Manufacturing (iHorn)
  0x1215: Quby BV
  0x1216: Hangzhou Roombanker Technology Co., Ltd.
  0x1217: Amazon Lab126
  0x1218: Paulmann Licht GmbH
  0x1219: Shenzhen Orvibo Electronics Co. Ltd.
  0x121A: TCI Telecommunications
  0x121B: Mueller-Licht International Inc.
  0x121C: Aurora Limited
  0x121D: SmartDCC
  0x121E: Shanghai UMEinfo Co. Ltd.
  0x121F: carbonTRACK
  0x1220: Somfy
  0x1221: Viessmann Elektronik GmbH
  0x1222: Hildebrand Technology Ltd
  0x1223: Onkyo Technology Corporation
  0x1224: Shenzhen Sunricher Technology Ltd.
  0x1225: Xiu Xiu Technology Co., Ltd
  0x1226: Zumtobel Group
  0x1227: Shenzhen Kaadas Intelligent Technology Co. Ltd
  0x1228: Shanghai Xiaoyan Technology Co. Ltd
  0x1229: Cypress Semiconductor
  0x122A: XAL GmbH
  0x122B: Inergy Systems LLC
  0x122C: Alfred Karcher GmbH & Co KG
  0x122D: Adurolight Manufacturing
  0x122E: Groupe Muller
  0x122F: V-Mark Enterprises Inc.
  0x1230: Lead Energy AG
  0x1231: UIOT Group
  0x1232: Axxess Industries Inc.
  0x1233: Third Reality Inc.
  0x1234: DSR Corporation
  0x1235: Guangzhou Vensi Intelligent Technology Co. Ltd.
  0x1236: Schlage Lock (Allegion)
  0x1237: Net2Grid
  0x1238: Airam Electric Oy Ab
  0x1239: IMMAX WPB CZ
  0x123A: ZIV Automation
  0x123B: HangZhou iMagicTechnology Co., Ltd
  0x123C: Xiamen Leelen Technology Co. Ltd.
  0x123D: Overkiz SAS
  0x123E: Flonidan A/S
  0x123F: HDL Automation Co., Ltd.
  0x1240: Ardomus Networks Corporation
  0x1241: Samjin Co., Ltd.
  0x1242: Sprue Aegis PLC
  0x1243: Indra Sistemas, S.A.
  0x1244: Shenzhen JBT Smart Lighting Co., Ltd.
  0x1245: GE Lighting & Current
  0x1246: Danfoss A/S
  0x1247: NIVISS PHP Sp. z o.o. Sp.k.
  0x1248: Shenzhen Fengliyuan Energy Conservating Technology Co. Ltd
  0x1249: NEXELEC
  0x124A: Sichuan Behome Prominent Technology Co., Ltd
  0x124B: Fujian Star-net Communication Co., Ltd.
  0x124C: Toshiba Visual Solutions Corporation
  0x124D: Latchable, Inc.
  0x124E: L&S Deutschland GmbH
  0x124F: Gledopto Co., Ltd.
  0x1250: The Home Depot
  0x1251: Neonlite International Ltd.
  0x1252: Arlo Technologies, Inc.
  0x1253: Xingluo Technology Co., Ltd.
  0x1254: Simon Electric (China) Co., Ltd.
  0x1255: Hangzhou Greatstar Industrial Co., Ltd.
  0x1256: Sequentric Energy Systems, LLC
  0x1257: Solum Co., Ltd.
  0x1258: Eaglerise Electric & Electronic (China) Co., Ltd.
  0x1259: Fantem Technologies (Shenzhen) Co., Ltd.
  0x125A: Yunding Network Technology (Beijing) Co., Ltd.
  0x125B: Atlantic Group
  0x125C: Xiamen Intretech, Inc.
  0x125D: Tuya Global Inc.
  0x125E: Xiamen Dnake Intelligent Technology Co., Ltd
  0x125F: Niko nv
  0x1260: Emporia Energy
  0x1261: Sikom AS
  0x1262: AXIS Labs, Inc.
  0x1263: Current Products Corporation
  0x1264: MeteRSit SRL
  0x1265: HORNBACH Baumarkt AG
  0x1266: DiCEworld s.r.l. a socio unico
  0x1267: ARC Technology Co., Ltd
  0x1268: Hangzhou Konke Information Technology Co., Ltd.
  0x1269: SALTO Systems S.L.
  0x126A: Shenzhen Shyugj Technology Co., Ltd
  0x126B: Brayden Automation Corporation
  0x126C: Environexus Pty. Ltd.
  0x126D: Eltra nv/sa
  0x126E: Xiaomi Communications Co., Ltd.
  0x126F: Shanghai Shuncom Electronic Technology Co., Ltd.
  0x1270: Voltalis S.A
  0x1271: FEELUX Co., Ltd.
  0x1272: SmartPlus Inc.
  0x1273: Halemeier GmbH
  0x1274: Trust International BBV
  0x1275: Duke Energy Business Services LLC
  0x1276: Calix, Inc.
  0x1277: ADEO
  0x1278: Connected Response Limited
  0x1279: StroyEnergoKom
  0x127A: Lumitech Lighting Solution GmbH
  0x127B: Verdant Environmental Technologies
  0x127C: Alfred International
  0x127D: Sansi LED Lighting
  0x127E: Mindtree
  0x127F: Nordic Semiconductor ASA
  0x1280: Siterwell Electronics
  0x1281: Briloner Leuchten GmbH
  0x1282: Shenzhen SEI Technology
  0x1283: Copper Labs
  0x1284: Delta Dore
  0x1285: Hager Group
  0x1286: Shenzhen CoolKit Technology
  0x1287: Hangzhou Sky-Lighting
  0x1288: E.ON SE
  0x1289: Lidl Stiftung
  0x128A: Sichuan Changhong Network Technologies
  0x128B: NodOn
  0x128C: Jiangxi Innotech Technology
  0x128D: Mercator Pty
  0x128E: Beijing Ruying Tech
  0x128F: EGLO Leuchten GmbH
  0x1290: Pietro Fiorentini S.p.A
  0x1291: Zehnder Group Vaux-Andigny
  0x1292: BRK Brands
  0x1293: Askey Computer
  0x1294: PassiveBolt
  0x1295: AVM Audiovisuelles
  0x1296: Ningbo Suntech Lighting Tech
  0x1297: Societe en Commandite Stello
  0x1298: Vivint Smart Home
  0x1299: Namron
  0x129A: RADEMACHER Geraete Elektronik GmbH
  0x129B: OMO Systems
  0x129C: Siglis
  0x129D: IMHOTEP CREATION
  0x129E: icasa
  0x129F: Level Home
  0x1300: TIS Control
  0x1301: Radisys India
  0x1302: Veea
  0x1303: FELL Technology
  0x1304: Sowilo Design Services
  0x1305: Lexi Devices
  0x1306: Lifi Labs
  0x1307: GRUNDFOS Holding
  0x1308: SOURCING & CREATION
  0x1309: Kraken Technologies
  0x130A: EVE SYSTEMS
  0x130B: LITE-ON TECHNOLOGY CORPORATION
  0x130C: Focalcrest
  0x130D: Bouffalo Lab (Nanjing)
  0x130E: Wyze Labs
  0x1337: Datek Wireless AS
  0x1994: Gewiss S.p.A.
  0x2794: Climax Technology Cp., Ltd.

templates:
  condSuccess: &__cond_success
    name: Status
    value: 0x00
    description: "successful"
  condAddrShort: &__cond_addr_short
    name: Address Mode
    invert: true
    value: 0x03
    description: "short address mode"
  condAddrLong: &__cond_addr_long
    name: Address Mode
    value: 0x03
    description: "long address mode"
  condAddrNotGroup: &__cond_addr_not_group
    name: Address Mode
    invert: true
    value: 0x01
    description: "is not group address"

types:
  status: &status
    name: Status
    description: Code, command is normally empty unless status is `Success`
    type: enum8
    values:
      0x00: Success
      0x80: Invalid Request Type
      0x81: Device Not Found
      0x82: Invalid Endpoint
      0x83: Not Active
      0x84: Not Supported
      0x85: Timeout
      0x86: No Match
      0x88: No Entry
      0x89: No Descriptor
      0x8A: Insufficient Space
      0x8B: Not Permitted
      0x8C: Table Full
      0x8D: Not Authorized
  addressMode: &addressMode
    name: Address Mode
    type: enum8
    values:
      "0x01": "Group"
      "0x02": "NWK"
      "0x03": "IEEE"
  ieee: &ieee
    name: IEEE Address
    description: is a 64-bit MAC address
    type: uid
  nwk: &nwk
    name: NWK Address
    description: is a 16-bit Network address
    showas: hex
    type: u16
  endpoint: &endpoint
    name: Endpoint
    showas: hex
    type: u8
    range: 0x01,0xfe
  endpointList: &endpointList
    name: Endpoint List
    type: set
    arraytype: u8
    marshalnotype: true
  addrReqType: &addrReqType
    name: Request Type
    description: should be set to 1 if extended response is requested, 0 otherwise
    type: enum8
    values:
      0x00: Single Device Response
      0x01: Extended Response
  startIndex: &startIndex
    name: Start Index
    type: u8
    description: >
      provides the starting index for the requested elements of the associated list.
  profileId: &profileId
    name: Profile ID
    showas: hex
    type: u16
    values:
      0x0104: Home Automation
      0xA1E0: Green Power
      0xC05E: Light Link
  clusterId: &clusterId
    name: Cluster ID
    showas: hex
    type: u16
  deviceType: &deviceType
    name: Device Type
    type: enum16
    values:
      0x0000: On/Off Switch
      0x0001: Level Control Switch
      0x0002: On/Off Output
      0x0003: Level Controllable Output
      0x0004: Scene Selector
      0x0005: Configuration Tool
      0x0006: Remote Control
      0x0007: Combined Interface
      0x0008: Range Extender
      0x0009: Mains Power Outlet
      0x000a: Door lock
      0x000c: Simple sensor
      0x0010: On/off plug-in unit
      0x0051: Smart plug
      0x0060: GP Proxy
      0x0061: GP Proxy Basic
      0x0062: GP Target Plus
      0x0063: GP Target
      0x0064: GP Commissioning Tool
      0x0065: GP Combo
      0x0066: GP Combo Basic
      0x0100: On/Off Light
      0x0101: Dimmable Light
      0x0102: Color Dimmable Light
      0x0103: On/Off Light Switch
      0x0104: Dimmer Switch
      0x0105: Color Dimmer Switch
      0x0106: Light Sensor
      0x0107: Occupancy Sensor
      0x0108: On/off ballast
      0x0109: Dimmable ballast
      0x010a: On/off plugin unit
      0x010b: Dimmable plugin unit
      0x010c: Color temperature light
      0x010d: Extended color light
      0x010e: Light level sensor
      0x0110: Dimmable plug-in unit
      0x0200: Shade
      0x0201: Shade Controller
      0x0202: Window Covering Device
      0x0210: Extended color light 2
      0x0220: Color temperature light 2
      0x0300: Heating/Cooling Unit
      0x0301: Thermostat
      0x0302: Temperature Sensor
      0x0303: Pump
      0x0304: Pump Controller
      0x0305: Pressure Sensor
      0x0306: Flow Sensor
      0x0400: IAS Control and Indicating Equipment
      0x0401: IAS Ancillary Control Equipment
      0x0402: IAS Zone
      0x0403: IAS Warning Device
      0x0500: Energy Service Portal
      0x0501: Metering Device
      0x0502: In-Premise Display
      0x0503: Programmable Communicating Thermostat (PCT)
      0x0504: Load Control Device
      0x0505: Smart Appliance
      0x0506: Prepayment Terminal
      0x0507: Device Management
      0x0800: Color controller
      0x0810: Color scene controller
      0x0820: Non color controller
      0x0830: Non color scene controller
      0x0840: Control bridge
      0x0850: On/off sensor


  inClusterList: &inClusterList
    name: In Cluster List
    description: is a list of input clusters
    type: set
    arraytype: u16
    marshalnotype: true
  outClusterList: &outClusterList
    name: Out Cluster List
    description: is a list of output clusters
    type: set
    arraytype: u16
    marshalnotype: true
  deviceCap: &deviceCap
    name: Capability
    description: specifies the device:s capabilities
    type: bmp8
    bits:
      0: Pan Coordinator
      1: Full Function
      2: Mains Power
      3: RX on Idle
      6: Security
      7: Allocate Address
  serverMask: &serverMask
    name: Server Mask
    type: bmp16
    bits:
      0: Primary Trust Center
      1: Backup Trust Center
      2: Primary Binding Table Cache
      3: Backup Binding Table Cache
      4: Primary Discovery Cache
      5: Backup Discovery Cache
      6: Network Manager
  userDescriptor: &userDescriptor
    name: User Descriptor
    type: cstring
    description: |
      is a user provided ASCII string of 16 characters set on a remote device.
      If the string is shorter than 16 characters it should be padded with space characters (0x20).
      Control characters (0x00-0x1f) are not allowed.
  nodeDescSize: &nodeDescSize
    name: Node Desc Size
    type: u8
    description: Size in bytes of the Node Descriptor
  powerDescSize: &powerDescSize
    name: Power Desc Size
    type: u8
    description: Size in bytes of the Power Descriptor
  activeEndpointSize: &activeEndpointSize
    name: Active Endpoint Size
    type: u8
    description: Size in bytes of the Active Endpoints List
  activeEndpointList: &activeEndpointList
    name: Active Endpoint List
    type: set
    arraytype: u8
    marshalnotype: true
    description: List of active endpoints
  simpleDescSizeList: &simpleDescSizeList
    name: Simple Desc Size List
    type: set
    arraytype: u8
    description: List of sizes for the different Simple Descriptors

  mnfCode: &mnfCode
    name: Manufacturer Code
    type: enum16
    values:
      <<: *manufacturer

  maxBufferSize: &maxBufferSize
    name: Max Buffer Size
    type: u8
    range: 0x00,0x7F
    description: |
      specifies the maximum size, in octets, of the network sub-layer data unit (NSDU) for this node.
      This is the maximum size of data or commands passed to or from the application by the application support
      sub-layer, before any fragmentation or re-assembly.
  maxRxSize: &maxRxSize
    name: Max RX size
    type: u16
    range: 0x00,0x7FFF
    description: >
      specifies the maximum size, in octets, of the application sub-layer data unit (ASDU) that can be transferred to
      this node in one single message transfer.
  maxTxSize: &maxTxSize
    name: Max TX size
    type: u16
    range: 0x00,0x7FFF
    description: |
      specifies the maximum size, in octets, of the application sub-layer data unit (ASDU) that can be transferred from
      this node in one single message transfer.
  npMode: &npMode
    name: Power Mode
    type: bmp8
    bits:
      0: Constant Power Available
      1: Rechargeable battery Available
      2: Disposable Battery Available
      4: Check In Periodically
      5: Check In on Action
  npSource: &npSource
    name: Power Source
    type: bmp8
    bits:
      0: Mains power
      1: Rechargeable battery
      2: Disposable battery
  npLevel: &npLevel
    name: Power Level
    type: enum8
    values:
      0x00: Critical
      0x04: 33%
      0x08: 66%
      0x0C: 100%

  deviceVersion: &deviceVersion
    name: Device Version
    type: u8
    default: 0x00
    description: is dependant on profile

  bindingTarget: &bindingTarget
    name: Binding Target
    type: u16
    showas: hex
    description: NWK Address
  sourceAddress: &sourceAddress
    name: Source Address
    description: of device generating the request
    type: uid
  sourceEndpoint: &sourceEndpoint
    name: Source Endpoint
    description: of device generating the request
    type: u8
    showas: hex
  associatedDevices: &associatedDevices
    name: Associated Devices
    type: list
    arraytype: u16
  UnknownU8: &unknownU8
    name: Unknown u8
    type: u8

  simpleDescriptor:
    .tpl: &simpleDescriptor
      name: Simple Descriptor
      type: _SimpleDescriptor
    name: Simple Descriptor
    type: local
    structattr:
      - *endpoint
      - *profileId
      - *deviceType
      - *deviceVersion
      - *inClusterList
      - *outClusterList

  rxOnWhenIdle: &rxOnWhenIdle
    name: Rx On When Idle
    type: enum8
    values:
      "0x00": Receiver is off
      "0x01": Receiver is on
      "0x02": Unknown
  neighborType: &neighborType
    name: Neighbor Type
    type: enum8
    values:
      "0x00": Coordinator
      "0x01": Router
      "0x03": End device
      "0x04": Unknown
  relationship: &relationship
    name: Relationship
    type: enum8
    values:
      "0x00": Parent
      "0x01": Child
      "0x02": Sibling
      "0x03": None
      "0x04": Previous Child
  permitJoining: &permitJoining
    name: Permit Joining
    type: enum8
    values:
      "0x00": Not permitted
      "0x01": Permitted
      "0x02": Unknown
  depth: &depth
    name: Depth
    type: u8
    description: of the neighbor device. A value of 0 indicates that the device is the coordinator for the network
  lqi: &lqi
    name: Lqi
    type: u8
    unit: Percent
    multiplier: 2.55
    description: is the estimated link quality for RF transmissions from this device

  totalEntries: &totalEntries
    name: Total Entries
    description: is the total number of entries that can be queried for
    type: u8

  neighborTableEntry:
    name: Neighbor Table Entry
    _ref: &neighborTableEntry "_NeighborTableEntry"
    type: local
    structattr:
      - <<: *ieee
        argname: Pan ID
      - *ieee
      - *nwk
      - <<: *neighborType
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.NeighborType = NeighborType((b[0] >> 6) & 0x03)
        marshal: |
          tmp = []byte{}
          tmp2 = uint32(v.NeighborType & 0x03) << 6
      - <<: *rxOnWhenIdle
        unmarshal: |
          v.RxOnWhenIdle = RxOnWhenIdle((b[0] >> 4) & 0x03)
        marshal: |
          tmp2 |= uint32(v.RxOnWhenIdle & 0x03) << 4
      - <<: *relationship
        unmarshal: |
          v.Relationship = Relationship((b[0] >> 1) & 0x07)
          b = b[1:]
        marshal: |
          tmp2 |= uint32(v.Relationship & 0x07) << 1
          tmp = []byte{uint8(tmp2)}
      - <<: *permitJoining
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.PermitJoining = PermitJoining((b[0] >> 6) & 0x03)
          b = b[1:]
        marshal: |
          tmp2 = uint32(v.PermitJoining & 0x03) << 6
          tmp = []byte{uint8(tmp2)}
      - *depth
      - *lqi

  neighborTable: &neighborTable
    name: Neighbor Table
    description:
    type: array
    arraytype: *neighborTableEntry


  bindingTableEntry:
    name: Binding Table Entry
    _ref: &bindingTableEntry
      name: Binding Table Entry
      type: &bindingTableEntryType "_BindingTableEntry"
    type: local
    structattr:
      - *sourceAddress
      - *sourceEndpoint
      - *clusterId
      - *addressMode
      - <<: *nwk
        cond:
          - *__cond_addr_short
      - <<: *ieee
        cond:
          - *__cond_addr_long
      - <<: *endpoint
        cond:
          - *__cond_addr_not_group

  bindingTable: &bindingTable
    name: Binding Table
    type: array
    arraytype: *bindingTableEntryType

  complexDescriptor: &complexDescriptor
    name: Complex Descriptor
    type: ostring

  powerDescriptor:
    name: Power Descriptor
    .tpl: &powerDescriptor
      name: Power Descriptor
      type: _PowerDescriptor
    type: local
    structattr:
      - <<: *npMode
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.PowerMode[0] = b[0] & 0x0F
        marshal: |
          tmp = []byte{}
          tmp2 = uint32(v.PowerMode[0] & 0x0F)
      - <<: *npSource
        argname: Active Power Source
        unmarshal: |
          v.ActivePowerSource[0] = (b[0] >> 4) & 0x0F
          b = b[1:]
        marshal: |
          tmp2 |= uint32(v.ActivePowerSource[0] & 0x0F) << 4
          tmp = []byte{uint8(tmp2)}
      - <<: *npSource
        argname: Current Power Source
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.CurrentPowerSource[0] = b[0] & 0x0F
        marshal: |
          tmp = []byte{}
          tmp2 = uint32(v.CurrentPowerSource[0] & 0x0F)
      - <<: *npLevel
        unmarshal: |
          v.PowerLevel = PowerLevel(b[0] >> 4) & 0x0F
          b = b[1:]
        marshal: |
          tmp2 |= uint32(v.PowerLevel & 0x0F) << 4
          tmp = []byte{uint8(tmp2)}

  logicalType: &logicalType
    name: Logical Type
    type: enum8
    values:
      "0x00": Coordinator
      "0x01": Router
      "0x02": End Device

  complexDescriptorAvailable: &complexDescriptorAvailable
    name: Complex Descriptor Available
    type: bool

  userDescriptorAvailable: &userDescriptorAvailable
    name: User Descriptor Available
    type: bool

  apsFlags: &apsFlags
    name: APS Flags
    type: u8

  frequencyBands: &frequencyBands
    name: Frequency Bands
    type: bmp8
    bits:
      0: "868 MHz"
      2: "902-928 MHz"
      3: "2.4 GHz"
      4: "EU Sub-GHz"
      # 0: "868.0-868.6 MHz"
      # 2: "902.0-928 MHz"
      # 3: "2400.0-2483.5 MHz"

  scannedChannels: &scannedChannels
    name: Scanned Channels
    type: bmp32
  totalTransmissions: &totalTransmissions
    name: Total Transmissions
    type: u16
  transmissionFailures: &transmissionFailures
    name: Transmission Failures
    type: u16
  energyValues: &energyValues
    name: Energy Values
    type: array
    arraytype: u8

  macCapabilityFlags: &macCapabilityFlags
    name: MAC Capability Flags
    type: bmp8
    bits:
      0: Alternate PAN Coordinator
      1: Full function device
      2: Mains powered
      3: Receiver on when idle
      6: Supports secured frames
      7: Allocate Address

  descriptorCapability: &descriptorCapability
    name: Descriptor Capability
    type: bmp8
    bits:
      0: Extended Active Endpoint List Available
      1: Extended Simple Descriptor List Available

  nodeDescriptor:
    .tpl: &nodeDescriptor
      name: Node Descriptor
      type: _NodeDescriptor
    name: Node Descriptor
    type: local
    structattr:
      - <<: *logicalType
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.LogicalType = LogicalType(b[0] & 0x07)
        marshal: |
          tmp = []byte{}
          tmp2 = uint32(v.LogicalType & 0x07)
      - <<: *complexDescriptorAvailable
        unmarshal: |
          v.ComplexDescriptorAvailable = ComplexDescriptorAvailable((b[0] >> 3) & 0x01)
        marshal: |
          tmp2 |= uint32(v.ComplexDescriptorAvailable & 0x01) << 3
      - <<: *userDescriptorAvailable
        unmarshal: |
          v.UserDescriptorAvailable = UserDescriptorAvailable((b[0] >> 4) & 0x01)
          b = b[1:]
        marshal: |
          tmp2 |= uint32(v.UserDescriptorAvailable & 0x01) << 4
          tmp = []byte{uint8(tmp2)}
      - <<: *apsFlags
        unmarshal: |
          if len(b) == 0 { return b, zcl.ErrNotEnoughData }
          v.ApsFlags = ApsFlags(b[0] & 0x07)
        marshal: |
          tmp = []byte{}
          tmp2 = uint32(v.ApsFlags & 0x07)
      - <<: *frequencyBands
        unmarshal: |
          v.FrequencyBands[0] = (b[0] >> 3) & 0x1F
          b = b[1:]
        marshal: |
          tmp2 |= uint32(v.FrequencyBands[0] & 0x1F) << 3
          tmp = []byte{uint8(tmp2)}
      - <<: *macCapabilityFlags
      - <<: *mnfCode
      - <<: *maxBufferSize
      - <<: *maxRxSize
      - <<: *serverMask
      - <<: *maxTxSize
      - <<: *descriptorCapability

commands:
  - name: NWK Address Request
    id: "0x0000"
    required: true
    response: "0x8000"
    description: |
      queries the 16-bit address of the Remote Device based on its known IEEE address.
      The destination addressing on this command shall be unicast or broadcast to all
      devices supporting RX on when Idle (0xFFFD)
    payloadattr:
      - *ieee
      - *addrReqType
      - *startIndex
  - name: NWK Address Response
    id: "0x8000"
    required: true
    description: |
    payloadattr:
      - *status
      - *ieee
      - *nwk
      - type: u8
        unmarshal: |
          if len(b) == 0 { return b, nil }
          nv := new(zcl.Zu8)
          b, _ = nv.UnmarshalZcl(b)
          tmp2 = uint32(*nv)
        marshal: |
          tmp = []byte{uint8(2*len(v.AssociatedDevices))}
        cond:
          - *__cond_success
      - <<: *startIndex
        cond:
          - *__cond_success
      - <<: *associatedDevices
        cond:
          - *__cond_success


  - name: IEEE Address Request
    id: "0x0001"
    required: true
    response: "0x8001"
    description: |
      queries the 64-bit IEEE address of the Remote Device based on its known 16-bit NWK address.
      The command should always be sent by unicast.
    payloadattr:
      - *nwk
      - *addrReqType
      - *startIndex
  - name: IEEE Address Response
    id: "0x8001"
    required: true
    description: |
    payloadattr:
      - *status
      - *ieee
      - *nwk
      - type: u8
        unmarshal: |
          if len(b) == 0 { return b, nil }
          nv := new(zcl.Zu8)
          b, _ = nv.UnmarshalZcl(b)
          tmp2 = uint32(*nv)
        marshal: |
          tmp = []byte{uint8(2*len(v.AssociatedDevices))}
        cond:
          - *__cond_success
      - <<: *startIndex
        cond:
          - *__cond_success
      - <<: *associatedDevices
        unmarshal: |
          if b, err = (&v.AssociatedDevices).UnmarshalZcl(append([]byte{uint8(tmp2)}, b...)); err != nil {
              return b, err
          }
        marshal: |
          if tmp, err = v.AssociatedDevices.MarshalZcl(); err != nil {
              return nil, err
          }
          // Ignore length, it was added earlier
          tmp = tmp[1:]
        cond:
          - *__cond_success


  - name: Node Desc Request
    id: "0x0002"
    required: true
    response: "0x8002"
    description: |
      queries the node descriptor of a remote device. Should be unicast to the remote device directly,
      or to a device that contains the discovery information of the remote device.
    payloadattr:
      - *nwk
  - name: Node Desc Response
    id: "0x8002"
    required: true
    payloadattr:
      - *status
      - *nwk
      - *nodeDescriptor


  - name: Power Desc Request
    id: "0x0003"
    required: true
    response: "0x8003"
    description: |
      queries the power descriptor of a remote device. Should be unicast to the remote device directly,
      or to a device that contains the discovery information of the remote device.
    payloadattr:
      - *nwk
  - name: Power Desc Response
    id: "0x8003"
    required: true
    payloadattr:
      - *status
      - *nwk
      - *powerDescriptor

  - name: Simple Desc Request
    id: "0x0004"
    required: true
    response: "0x8004"
    description: |
      queries the Simple Descriptor of a remote device on a specific endpoint.
      Simple Descriptor contains information about which clusters the device supports on the given endpoint.
      Should be unicast to the remote device directly, or to a device that contains the discovery information
      of the remote device.
    payloadattr:
      - *nwk
      - *endpoint
  - name: Simple Desc Response
    id: "0x8004"
    payloadattr:
      - *status
      - *nwk
      - marshal: |
          sd, _ := v.SimpleDescriptor.MarshalZcl()
          tmp = []byte{uint8(len(sd))}
        unmarshal: |
          // Ignore descriptor length
          if b, err = new(zcl.Zu8).UnmarshalZcl(b); err != nil {
          	return b, err
          }
        cond:
          - *__cond_success
      - <<: *simpleDescriptor
        cond:
          - *__cond_success


  - name: Active Endpoint Request
    id: "0x0005"
    response: "0x8005"
    required: true
    description: |
      queries the remote device for a list of active endpoints. Should be unicast to the remote device directly,
      or to a device that contains the discovery information of the remote device.
    payloadattr:
      - *nwk
  - name: Active Endpoint Response
    id: "0x8005"
    required: true
    payloadattr:
      - *status
      - <<: *nwk
        cond:
          - *__cond_success
      - <<: *endpointList
        cond:
          - *__cond_success

  - name: Match Desc Request
    id: "0x0006"
    required: true
    description: |
      is used to find remote devices supporting a specific simple descriptor match criterion. Normally broadcast
      to all devices supporting RX on when Idle (0xFFFD)
    payloadattr:
      - *nwk
      - *profileId
      - *inClusterList
      - *outClusterList

  - name: Match Desc Response
    id: "0x8006"
    payloadattr:
      - *status
      - <<: *nwk
        cond:
          - *__cond_success
      - <<: *endpointList
        cond:
          - *__cond_success

  - name: Complex Desc Request
    id: "0x0010"
    description: |
      queries the Complex Descriptor of a remote device. Should be unicast to the remote device directly,
      or to a device that contains the discovery information of the remote device.
    payloadattr:
      - *nwk
  - name: Complex Desc Response
    id: "0x8010"
    payloadattr:
      - *status
      - <<: *nwk
        cond:
          - *__cond_success
      - <<: *complexDescriptor
        cond:
          - *__cond_success

  - name: User Desc Request
    id: "0x0011"
    description: |
      queries the User Descriptor of a remote device. Should be unicast to the remote device directly,
      or to a device that contains the discovery information of the remote device.
    payloadattr:
      - *nwk
  - name: User Desc Response
    id: "0x8011"
    payloadattr:
      - *status
      - <<: *nwk
        cond:
          - *__cond_success
      - <<: *userDescriptor
        cond:
          - *__cond_success


  - name: Discovery Cache Request
    id: "0x0012"
    description: >
      locates a Primary Discovery Cache on the network. Should be addressed to broadcast RXOnWhenIdle (0xFFFD)
    payloadattr:
      - *nwk
      - *ieee


  - name: Device Announce
    id: "0x0013"
    required: true
    description: |
      is sent by a joining or returning device, identifying it's NWK address, IEEE address and capabilities.
      Normally sent to broadcast RXOnWhenIdle (0xFFFD)
    payloadattr:
      - *nwk
      - *ieee
      - *deviceCap


  - name: User Desc Set Request
    id: "0x0014"
    description: >
      requests the remote device to update it's user descriptor.
    payloadattr:
      - *nwk
      - *userDescriptor


  - name: System Server Discover Request
    id: "0x0015"
    description: >
      discovers the location of a particular system server or servers as indicated by the Server Mask.
      Should be sent to broadcast RXOnWhenIdle (0xFFFD)
    payloadattr:
      - *serverMask


  - name: Discovery Store Request
    id: "0x0016"
    description: |
      sent to a Discovery Cache Node to allocate memory of the provided sizes for cache storage.
      If the node already exists in cache, it will be removed to allow storage of updated values.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
      - *nodeDescSize
      - *powerDescSize
      - *activeEndpointSize
      - *simpleDescSizeList


  - name: Node Desc Store Request
    id: "0x0017"
    description: |
      sent to a Discovery Cache Node to store the provided Node Descriptor.
      A DiscoveryStoreRequest should be sent and acknowledged with successful status before requesting storage.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
      # - *ndType
      # - *ndFrequency
      - *deviceCap
      - *mnfCode
      - *maxBufferSize
      - *maxRxSize
      - *serverMask
      - *maxTxSize
      # - *ndDescCap


  - name: Power Desc Store Request
    id: "0x0018"
    description: |
      sent to a Discovery Cache Node to store the provided Power Descriptor.
      A DiscoveryStoreRequest should be sent and acknowledged with successful status before requesting storage.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
      - *npMode
      - *npSource


  - name: Active Endpoint Store Request
    id: "0x0019"
    description: |
      sent to a Discovery Cache Node to store the provided Active Endpoint list.
      A DiscoveryStoreRequest should be sent and acknowledged with successful status before requesting storage.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
      - *endpointList


  - name: Simple Desc Store Request
    id: "0x001A"
    description: |
      sent to a Discovery Cache Node to store the provided Simple Descriptor.
      A DiscoveryStoreRequest should be sent and acknowledged with successful status before requesting storage.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
      - type: u8
        marshal: |
          if tmp, err = v.SimpleDescriptor.MarshalZcl(); err != nil {
            return nil, err
          }
          data = append(data, uint8(len(tmp)))
      - <<: *simpleDescriptor
        marshal: |
          // Marshalled above
          tmp = []byte{}


  - name: Remove Node Cache Request
    id: "0x001B"
    description: >
      sent to a Discovery Cache Node will request it to remove cached values for the provided node.
      Should be sent to the unicast address of a discovery cache device.
    payloadattr:
      - *nwk
      - *ieee
  - name: Find Node Cache Request
    id: "0x001C"
    description: |
      broadcast to the network will generate a response from the Primary Discovery Cache holding information
      for the device of interest
    payloadattr:
      - *nwk
      - *ieee
  - name: Extended Simple Desc Request
    id: "0x001D"
    description: |
      should be unicast to the remote device or a discovery cache node. It is used to request information from
      nodes that implements a larger number of clusters than can be described by a SimpleDescRequest
    payloadattr:
      - *nwk
      - *endpoint
      - *startIndex
  - name: Extended Active Endpoint Request
    id: "0x001E"
    description: |
      should be unicast to the remote device or a discovery cache node. It is used to request information from
      nodes that implements a larger number of endpoints than can be described by a ActiveEndpointRequest
    payloadattr:
      - *nwk
      - *startIndex
  - name: End Device Bind Request
    id: "0x0020"
    description: |
      is sent to the ZigBee coordinator from two different devices simultaneously.
      * If the supplied endpoint is outside the specified range - a reply is sent with status `InvalidEndpoint`
      * If only one device sends the request within a pre-configure timeout - a reply is sent with status `Timeout`
      * If the ProfileID doesn't match or none of the In/OutClusterList elements match - a reply is sent with status
        `NoMatch`
      * Otherwise, a reply is sent with status `Success` to each device

      The Coordinator then needs to either send `BindRequest` or `UnbindRequest` for each matched `ClusterID`.
      This is done by first issuing a `UnbindRequest` with any of the matched `ClusterID`:
      * If the reply status is `NoEntry` - `BindRequest` will instead be sent for each matched `ClusterID`
      * If the reply status is `Success` - additional unbind requests are sent the rest of the matched cluster

      This enables the request to toggle the binding.
    payloadattr:
      - *bindingTarget
      - *sourceAddress
      - *sourceEndpoint
      - *profileId
      - *inClusterList
      - *outClusterList

  - name: Bind Request
    id: "0x0021"
    response: "0x8033"
    payloadattr:
      - *bindingTableEntry
  - name: Bind Response
    id: "0x8021"
    payloadattr:
      - *status

  - name: Mgmt Bind Request
    id: "0x0033"
    response: "0x8033"
    payloadattr:
      - *startIndex
  - name: Mgmt Bind Response
    id: "0x8033"
    payloadattr:
      - *status
      - *totalEntries
      - *startIndex
      - *bindingTable

  - name: Unbind Request
    id: "0x0022"
    payloadattr:
      - *bindingTableEntry
  - name: Unbind Response
    id: "0x8022"
    payloadattr:
      - *status
  - name: Mgmt Lqi Request
    id: "0x0031"
    payloadattr:
      - *startIndex
  - name: Mgmt Lqi Response
    id: "0x8031"
    payloadattr:
      - *status
      - *totalEntries
      - *startIndex
      - *neighborTable
  - name: Mgmt Nwk Update
    id: "0x8038"
    payloadattr:
      - *status
      - *scannedChannels
      - *totalTransmissions
      - *transmissionFailures
      - *energyValues
